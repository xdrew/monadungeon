# Build production frontend and output to volume

FROM node:18-alpine AS builder

# Accept build arguments for environment variables
ARG VITE_PRIVY_APP_ID
ARG VITE_MONAD_GAMES_APP_ID
ARG VITE_API_BASE_URL=https://monadungeon.xyz

WORKDIR /app

# Copy package files
COPY package.json package-lock.json* ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci

# Copy application code
COPY . .

# Remove any existing .env files to ensure clean build
RUN rm -f .env .env.* || true

# Create .env.production.local file (highest priority for Vite production builds)
RUN echo "VITE_PRIVY_APP_ID=${VITE_PRIVY_APP_ID}" > .env.production.local && \
    echo "VITE_MONAD_GAMES_APP_ID=${VITE_MONAD_GAMES_APP_ID}" >> .env.production.local && \
    echo "VITE_API_BASE_URL=${VITE_API_BASE_URL}" >> .env.production.local

# Debug: Show the env file and build args
RUN echo "=== Build Arguments ===" && \
    echo "VITE_PRIVY_APP_ID=${VITE_PRIVY_APP_ID}" && \
    echo "VITE_MONAD_GAMES_APP_ID=${VITE_MONAD_GAMES_APP_ID}" && \
    echo "VITE_API_BASE_URL=${VITE_API_BASE_URL}" && \
    echo "=== .env.production.local ===" && \
    cat .env.production.local

# Build the application for production
# Vite will read .env.production.local with highest priority
RUN npm run build

# Debug: Verify environment variables are in the built files
RUN echo "=== Checking built files for environment variables ===" && \
    echo "Searching for VITE_PRIVY_APP_ID value (${VITE_PRIVY_APP_ID}):" && \
    (grep -l "${VITE_PRIVY_APP_ID}" dist/assets/*.js 2>/dev/null && echo "✓ Found") || echo "✗ NOT FOUND!" && \
    echo "Searching for VITE_MONAD_GAMES_APP_ID value (${VITE_MONAD_GAMES_APP_ID}):" && \
    (grep -l "${VITE_MONAD_GAMES_APP_ID}" dist/assets/*.js 2>/dev/null && echo "✓ Found") || echo "✗ NOT FOUND!" && \
    echo "Checking for unprocessed env var names:" && \
    (grep "VITE_PRIVY_APP_ID\|VITE_MONAD_GAMES_APP_ID" dist/assets/*.js 2>/dev/null | head -2 || echo "✓ No unprocessed env vars found")

# Final stage: Just copy the built files
FROM alpine:3.18

WORKDIR /app

# Install bash for any scripts
RUN apk add --no-cache bash

# Copy built assets from builder stage
COPY --from=builder /app/dist /app/dist

# The volume mount will be at /app/dist
VOLUME ["/app/dist"]

# This container just builds and exits
CMD ["sh", "-c", "echo 'Frontend build complete. Static files available in /app/dist'"]