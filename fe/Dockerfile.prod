# Build production frontend and output to volume

FROM node:18-alpine AS builder

# Accept build arguments for environment variables
ARG VITE_PRIVY_APP_ID
ARG VITE_MONAD_GAMES_APP_ID
ARG VITE_API_BASE_URL=https://monadungeon.xyz

# Set them as environment variables for the build process
ENV VITE_PRIVY_APP_ID=${VITE_PRIVY_APP_ID}
ENV VITE_MONAD_GAMES_APP_ID=${VITE_MONAD_GAMES_APP_ID}
ENV VITE_API_BASE_URL=${VITE_API_BASE_URL}

WORKDIR /app

# Copy package files
COPY package.json package-lock.json* ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci

# Copy application code (dockerignore excludes .env files)
COPY . .

# Debug: Show that environment variables are set
RUN echo "Environment variables for build:" && \
    echo "VITE_PRIVY_APP_ID=${VITE_PRIVY_APP_ID}" && \
    echo "VITE_MONAD_GAMES_APP_ID=${VITE_MONAD_GAMES_APP_ID}" && \
    echo "VITE_API_BASE_URL=${VITE_API_BASE_URL}"

# Build the application with environment variables
# Vite should read from process.env when .env file is not working
RUN npm run build

# Verify the build worked
RUN echo "Checking if environment variables were replaced in build..." && \
    if grep -q "VITE_PRIVY_APP_ID" dist/assets/*.js; then \
        echo "ERROR: Environment variables were NOT replaced! Build failed!" && \
        echo "Debugging: Checking what's in the built files..." && \
        grep "import.meta.env" dist/assets/*.js | head -5 && \
        exit 1; \
    else \
        echo "SUCCESS: Environment variables were properly replaced in build"; \
    fi && \
    echo "Checking for actual app IDs in built files..." && \
    grep -l "cmeb207py01ikky0csyj8akos" dist/assets/*.js 2>/dev/null || echo "WARNING: Privy app ID not found" && \
    grep -l "cmd8euall0037le0my79qpz42" dist/assets/*.js 2>/dev/null || echo "WARNING: Monad Games app ID not found"

# Final stage: Just copy the built files
FROM alpine:3.18

WORKDIR /app

# Install bash for any scripts
RUN apk add --no-cache bash

# Copy built assets from builder stage
COPY --from=builder /app/dist /app/dist

# The volume mount will be at /app/dist
VOLUME ["/app/dist"]

# This container just builds and exits
CMD ["sh", "-c", "echo 'Frontend build complete. Static files available in /app/dist'"]