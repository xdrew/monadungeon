<?php

namespace Bunny;

use Bunny\Message;
use Bunny\Protocol\MethodBasicCancelOkFrame;
use Bunny\Protocol\MethodBasicConsumeOkFrame;
use Bunny\Protocol\MethodBasicQosOkFrame;
use Bunny\Protocol\MethodConfirmSelectOkFrame;
use Bunny\Protocol\MethodExchangeDeclareOkFrame;
use Bunny\Protocol\MethodQueueBindOkFrame;
use Bunny\Protocol\MethodQueueDeclareOkFrame;
use React\Promise\PromiseInterface;

class Channel
{
    /**
     * @return PromiseInterface<MethodConfirmSelectOkFrame>
     */
    public function confirmSelect(callable $callback = null, $nowait = false) {}

    /**
     * @return PromiseInterface<MethodBasicQosOkFrame>
     */
    public function qos(int $prefetchSize = 0, int $prefetchCount = 0, bool $global = false) {}

    /**
     * @return PromiseInterface<int>
     */
    public function publish(string $body, array $headers = [], string $exchange = '', string $routingKey = '', bool $mandatory = false, bool $immediate = false) {}

    /**
     * @param callable(Message, self, Async\Client): void $callback
     * @return PromiseInterface<MethodBasicConsumeOkFrame>
     */
    public function consume(callable $callback, string $queue = '', string $consumerTag = '', bool $noLocal = false, bool $noAck = false, bool $exclusive = false, bool $nowait = false, array $arguments = []) {}

    /**
     * @return PromiseInterface<MethodQueueDeclareOkFrame>
     */
    public function queueDeclare(string $queue = '', bool $passive = false, bool $durable = false, bool $exclusive = false, bool $autoDelete = false, bool $nowait = false, array $arguments = []) {}

    /**
     * @return PromiseInterface<MethodExchangeDeclareOkFrame>
     */
    public function exchangeDeclare(string $exchange, string $exchangeType = 'direct', bool $passive = false, bool $durable = false, bool $autoDelete = false, bool $internal = false, bool $nowait = false, array $arguments = []) {}

    /**
     * @return PromiseInterface<MethodQueueBindOkFrame>
     */
    public function queueBind(string $queue, string $exchange, string $routingKey = '', bool $nowait = false, array $arguments = []) {}

    /**
     * @return PromiseInterface<bool>
     */
    public function ack(Message $message, bool $multiple = false) {}

    /**
     * @return PromiseInterface<MethodBasicCancelOkFrame>
     */
    public function cancel(string $consumerTag, bool $nowait = false) {}

    /**
     * @return PromiseInterface<void>
     */
    public function close(int $replyCode = 0, string $replyText = '') {}
}
