services:
  db:
    container_name: db_monadungeon_prod
    image: postgres:17-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_DB: monadungeon
      POSTGRES_USER: monadungeon
      TZ: 'UTC'
      PGTZ: 'UTC'
    ports:
      - 5432:5432
    networks:
      - monadungeon_prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U monadungeon"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    container_name: rabbitmq_monadungeon_prod
    image: heidiks/rabbitmq-delayed-message-exchange:3.10.2-management
    restart: unless-stopped
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/mnesia:delegated
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    networks:
      - monadungeon_prod
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    container_name: nginx_monadungeon_prod
    image: nginx:1.25-alpine
    restart: unless-stopped
    volumes:
      - ./docker/nginx/monadungeon-https.conf:/etc/nginx/conf.d/default.conf:ro
      - frontend_dist:/usr/share/nginx/html:ro
      - nginx_cache:/var/cache/nginx
      - letsencrypt:/etc/letsencrypt:ro
      - certbot_webroot:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - php
      - frontend-builder
    networks:
      - monadungeon_prod

  # Build frontend and extract static files
  frontend-builder:
    container_name: frontend_builder_monadungeon_prod
    build:
      context: ./fe
      dockerfile: Dockerfile.prod
      args:
        VITE_PRIVY_APP_ID: ${VITE_PRIVY_APP_ID}
        VITE_MONAD_GAMES_APP_ID: ${VITE_MONAD_GAMES_APP_ID}
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-https://monadungeon.xyz}
    volumes:
      - frontend_dist:/app/dist
    command: sh -c "echo 'Frontend built successfully'"
    networks:
      - monadungeon_prod


  php:
    container_name: php_monadungeon_prod
    build:
      context: .
      dockerfile: docker/php/Dockerfile
      target: app_prod
    restart: unless-stopped
    volumes:
      - ./src/.rr.prod.yaml:/sf/app/src/.rr.prod.yaml:ro
    command: rr serve -c .rr.prod.yaml
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - monadungeon_prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Redis for caching
  redis:
    container_name: redis_monadungeon_prod
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - monadungeon_prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Certbot for SSL certificates (run periodically)
  certbot:
    image: certbot/certbot
    container_name: certbot_monadungeon_prod
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - monadungeon_prod

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
  nginx_cache:
  letsencrypt:
  certbot_webroot:
  frontend_dist:

networks:
  monadungeon_prod:
    name: monadungeon_prod
    driver: bridge